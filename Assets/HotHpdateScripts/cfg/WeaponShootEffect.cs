
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class WeaponShootEffect : Luban.BeanBase
{
    public WeaponShootEffect(JSONNode _buf) 
    {
        { if(!_buf["effectName"].IsNumber) { throw new SerializationException(); }  EffectName = (EnumWeaponShootEffect)_buf["effectName"].AsInt; }
        { if(!_buf["duration"].IsNumber) { throw new SerializationException(); }  Duration = _buf["duration"]; }
        { if(!_buf["startParticleSize"].IsNumber) { throw new SerializationException(); }  StartParticleSize = _buf["startParticleSize"]; }
        { if(!_buf["startParticleSpeed"].IsNumber) { throw new SerializationException(); }  StartParticleSpeed = _buf["startParticleSpeed"]; }
        { if(!_buf["startLifetime"].IsNumber) { throw new SerializationException(); }  StartLifetime = _buf["startLifetime"]; }
        { if(!_buf["maxParticleNumber"].IsNumber) { throw new SerializationException(); }  MaxParticleNumber = _buf["maxParticleNumber"]; }
        { if(!_buf["emissionRate"].IsNumber) { throw new SerializationException(); }  EmissionRate = _buf["emissionRate"]; }
        { if(!_buf["burstParticleNumber"].IsNumber) { throw new SerializationException(); }  BurstParticleNumber = _buf["burstParticleNumber"]; }
        { if(!_buf["effectGravity"].IsNumber) { throw new SerializationException(); }  EffectGravity = _buf["effectGravity"]; }
        { if(!_buf["Sprite"].IsString) { throw new SerializationException(); }  Sprite = _buf["Sprite"]; }
        { if(!_buf["velocityOverLifetimeMin"].IsObject) { throw new SerializationException(); }  VelocityOverLifetimeMin = vector3.Deserializevector3(_buf["velocityOverLifetimeMin"]);  }
        { if(!_buf["velocityOverLifetimeMax"].IsObject) { throw new SerializationException(); }  VelocityOverLifetimeMax = vector3.Deserializevector3(_buf["velocityOverLifetimeMax"]);  }
        { if(!_buf["weaponEffectPrefab"].IsString) { throw new SerializationException(); }  WeaponEffectPrefab = _buf["weaponEffectPrefab"]; }
    }

    public static WeaponShootEffect DeserializeWeaponShootEffect(JSONNode _buf)
    {
        return new WeaponShootEffect(_buf);
    }

    /// <summary>
    /// 特效名称
    /// </summary>
    public readonly EnumWeaponShootEffect EffectName;
    /// <summary>
    /// 粒子持续时间
    /// </summary>
    public readonly float Duration;
    /// <summary>
    /// 粒子起始大小
    /// </summary>
    public readonly float StartParticleSize;
    /// <summary>
    /// 粒子起始速度
    /// </summary>
    public readonly float StartParticleSpeed;
    /// <summary>
    /// 粒子生命周期
    /// </summary>
    public readonly float StartLifetime;
    /// <summary>
    /// 粒子最大数量
    /// </summary>
    public readonly int MaxParticleNumber;
    /// <summary>
    /// 粒子密度
    /// </summary>
    public readonly int EmissionRate;
    /// <summary>
    /// 爆炸粒子数量
    /// </summary>
    public readonly int BurstParticleNumber;
    /// <summary>
    /// 粒子效果的重力
    /// </summary>
    public readonly float EffectGravity;
    /// <summary>
    /// 粒子精灵的路径
    /// </summary>
    public readonly string Sprite;
    /// <summary>
    /// 声明周期中速度的最小值
    /// </summary>
    public readonly vector3 VelocityOverLifetimeMin;
    /// <summary>
    /// 声明周期中速度的最大值
    /// </summary>
    public readonly vector3 VelocityOverLifetimeMax;
    /// <summary>
    /// 特效预制体的路径
    /// </summary>
    public readonly string WeaponEffectPrefab;
   
    public const int __ID__ = 1254118068;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "effectName:" + EffectName + ","
        + "duration:" + Duration + ","
        + "startParticleSize:" + StartParticleSize + ","
        + "startParticleSpeed:" + StartParticleSpeed + ","
        + "startLifetime:" + StartLifetime + ","
        + "maxParticleNumber:" + MaxParticleNumber + ","
        + "emissionRate:" + EmissionRate + ","
        + "burstParticleNumber:" + BurstParticleNumber + ","
        + "effectGravity:" + EffectGravity + ","
        + "Sprite:" + Sprite + ","
        + "velocityOverLifetimeMin:" + VelocityOverLifetimeMin + ","
        + "velocityOverLifetimeMax:" + VelocityOverLifetimeMax + ","
        + "weaponEffectPrefab:" + WeaponEffectPrefab + ","
        + "}";
    }
}

}
